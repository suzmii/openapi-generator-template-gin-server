{{>partial_header}}
package {{packageName}}

import (
	"github.com/gin-gonic/gin"
	"net/http"
)

type ErrorResponse struct {
	Code    int         `json:"code"`
	Message string      `json:"message"`
}

{{#operations}}
{{#operation}}
// {{httpMethod}} {{{basePathWithoutHost}}}{{{path}}}{{#summary}}
// {{{.}}}{{/summary}}
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func {{nickname}}(c *gin.Context) {
	{{#pathParams.0}}// ==== 路径参数处理 ====
	{{/pathParams.0}}{{#pathParams}}
	{{paramName}} := c.Param("{{baseName}}") // 路径参数 {{baseName}}
	{{/pathParams}}
	{{#bodyParams.0}}// ==== 校验请求 ====
	{{/bodyParams.0}}{{#bodyParam}}var req {{dataType}}
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, ErrorResponse{
			Code:    http.StatusBadRequest,
			Message: "Invalid request body",
		})
		return
	}
	
	{{/bodyParam}}
	// TODO: 业务代码

	// ==== 响应 ====
	{{#responses}}
	{{#dataType}}
	var response {{dataType}}
	{{/dataType}}
	{{/responses}}
	
	c.JSON(http.StatusOK, response)
}
{{/operation}}
{{/operations}}